/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.auspost.location.api;

import com.auspost.location.api.model.AddLocationReq;
import com.auspost.location.api.model.Location;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Location", description = "the Location API")
public interface LocationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/locations : Creates a new suburbs location
     * Creates a new suburbs location. Does nothing if location already exists.
     *
     * @param addLocationReq  (optional)
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Creates a new suburbs location", nickname = "createLocation", notes = "Creates a new suburbs location. Does nothing if location already exists.", response = Location.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Location.class) })
    @RequestMapping(value = "/api/v1/locations",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/xml", "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Location> createLocation(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AddLocationReq addLocationReq) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"suburbs\" : \"suburbs\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Location> <id>aeiou</id> <suburbs>aeiou</suburbs> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Location>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/locations/{id} : Deletes suburbs&#39;s Location
     * Deletes suburbs&#39;s Location based on given location ID.
     *
     * @param id Location Identifier (required)
     * @return Accepts the deletion request and perform deletion. If ID does not exist, does nothing. (status code 202)
     */
    @ApiOperation(value = "Deletes suburbs's Location", nickname = "deleteLocationById", notes = "Deletes suburbs's Location based on given location ID.", tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepts the deletion request and perform deletion. If ID does not exist, does nothing.") })
    @RequestMapping(value = "/api/v1/locations/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteLocationById(@ApiParam(value = "Location Identifier",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/allLocations : Returns all suburbs&#39;s locations
     * Returns all suburbs&#39;s locations, else empty collection
     *
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Returns all suburbs's locations", nickname = "getAllLocations", notes = "Returns all suburbs's locations, else empty collection", response = Location.class, responseContainer = "List", tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Location.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/allLocations",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Location>> getAllLocations() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"suburbs\" : \"suburbs\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Location> <id>aeiou</id> <suburbs>aeiou</suburbs> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Location>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/locations/{id} : Returns suburbs&#39;s Location
     * Returns suburbs&#39;s Location based on given Location ID.
     *
     * @param id Location Identifier (required)
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Returns suburbs's Location", nickname = "getLocationById", notes = "Returns suburbs's Location based on given Location ID.", response = Location.class, tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Location.class) })
    @RequestMapping(value = "/api/v1/locations/{id}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Location> getLocationById(@ApiParam(value = "Location Identifier",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"suburbs\" : \"suburbs\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Location> <id>aeiou</id> <suburbs>aeiou</suburbs> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Location>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/locations : Returns all the matched locations
     * Returns the locations that matches the given query criteria
     *
     * @param suburbs Location suburbs (optional)
     * @param pincode Location pincode (optional)
     * @param page Query page number (optional, default to 1)
     * @param size Query page size (optional, default to 10)
     * @return For successful fetch. (status code 200)
     */
    @ApiOperation(value = "Returns all the matched locations", nickname = "getLocations", notes = "Returns the locations that matches the given query criteria", response = Location.class, responseContainer = "List", tags={ "location", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "For successful fetch.", response = Location.class, responseContainer = "List") })
    @RequestMapping(value = "/api/v1/locations",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Location>> getLocations(@ApiParam(value = "Location suburbs") @Valid @RequestParam(value = "suburbs", required = false) String suburbs,@ApiParam(value = "Location pincode") @Valid @RequestParam(value = "pincode", required = false) String pincode,@ApiParam(value = "Query page number", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page,@ApiParam(value = "Query page size", defaultValue = "10") @Valid @RequestParam(value = "size", required = false, defaultValue="10") Integer size) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"suburbs\" : \"suburbs\", \"country\" : \"country\", \"pincode\" : \"pincode\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Location> <id>aeiou</id> <suburbs>aeiou</suburbs> <state>aeiou</state> <country>aeiou</country> <pincode>aeiou</pincode> </Location>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
